// @ts-nocheck
// tslint:disable
/**
 * Adatree ADR Platform Consent API
 * A Consent API for ADRs. This allows ADRs to query for consents granted by their customers to access CDR consumer data. It also provides a mechanism to configure scopes and use-cases which are then made available in the consent dashboard.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@adatree.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @enum {string}
 */
export enum AccessFrequency {
  ONCEOFF = 'ONCE_OFF',
  ONGOING = 'ONGOING',
}

/**
 *
 * @export
 * @interface AdrUpdateConsent
 */
export interface AdrUpdateConsent {
  /**
   *
   * @type {string}
   * @memberof AdrUpdateConsent
   */
  externalId?: string;
}
/**
 *
 * @export
 * @interface ConsentEvent
 */
export interface ConsentEvent {
  /**
   * a UUID of the event that could be used for idempotent event processing
   * @type {string}
   * @memberof ConsentEvent
   */
  eventId?: string;
  /**
   * This identifies the different types of events through a consent\'s lifecycle. <br/> A consent becomes GRANTED after consumer consent with Data Holder<br/> it can be revoked by a consumer via ADR or Data Holder<br/> an ongoing consent will expire on (if it is not revoked prior to) sharing end date a once_off consent will expire within 24 hours after the consent is GRANTED
   * @type {string}
   * @memberof ConsentEvent
   */
  eventType: ConsentEventEventTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  timestamp: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  cdrArrangementId: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  consentId: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  consumerId: string;
  /**
   *
   * @type {PostUsageAction}
   * @memberof ConsentEvent
   */
  postUsageAction: PostUsageAction;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  externalId?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  sharingEndDate?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  consumerEmail?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentEvent
   */
  consumerMobileNumber?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ConsentEventEventTypeEnum {
  GRANTED = 'GRANTED',
  REVOKED = 'REVOKED',
  EXPIRED = 'EXPIRED',
}

/**
 *
 * @export
 * @interface ConsentEventData
 */
export interface ConsentEventData {
  /**
   *
   * @type {Array<ConsentEvent>}
   * @memberof ConsentEventData
   */
  events?: Array<ConsentEvent>;
}
/**
 *
 * @export
 * @interface ConsentEventList
 */
export interface ConsentEventList {
  /**
   *
   * @type {ConsentEventData}
   * @memberof ConsentEventList
   */
  data: ConsentEventData;
  /**
   *
   * @type {LinksPaginated}
   * @memberof ConsentEventList
   */
  links: LinksPaginated;
  /**
   *
   * @type {MetaPaginated}
   * @memberof ConsentEventList
   */
  meta: MetaPaginated;
}
/**
 *
 * @export
 * @interface ConsentHistoryResponse
 */
export interface ConsentHistoryResponse {
  /**
   *
   * @type {Array<ConsentResponse>}
   * @memberof ConsentHistoryResponse
   */
  consents?: Array<ConsentResponse>;
}
/**
 *
 * @export
 * @interface ConsentResponse
 */
export interface ConsentResponse {
  /**
   *
   * @type {number}
   * @memberof ConsentResponse
   */
  version?: number;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  created?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  revoked?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  lastNotificationSentAt?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  firstDataCollection?: string;
  /**
   *
   * @type {Status}
   * @memberof ConsentResponse
   */
  status?: Status;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  sharingEndDate?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  consumerEmail?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  dataHolderName?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  dataHolderBrandId?: string;
  /**
   *
   * @type {UseCaseResponse}
   * @memberof ConsentResponse
   */
  useCase?: UseCaseResponse;
  /**
   *
   * @type {PostUsageAction}
   * @memberof ConsentResponse
   */
  postUsageAction?: PostUsageAction;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  consumerId?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  cdrArrangementId?: string;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  consentId?: string;
  /**
   *
   * @type {boolean}
   * @memberof ConsentResponse
   */
  directMarketingAllowed?: boolean;
  /**
   *
   * @type {string}
   * @memberof ConsentResponse
   */
  consumerMobileNumber?: string;
  /**
   * Adatree\'s customer can supply an externalId when creating consents to associate with records in its own system
   * @type {string}
   * @memberof ConsentResponse
   */
  externalId?: string;
}
/**
 *
 * @export
 * @interface LinksPaginated
 */
export interface LinksPaginated {
  /**
   * Fully qualified link that generated the current response document. https://self.example.com.au will be converted to https://self.example.com.au?page=1&page-size=25
   * @type {string}
   * @memberof LinksPaginated
   */
  self: string;
  /**
   * URI to the first page of this set. Mandatory if this response is not the first page
   * @type {string}
   * @memberof LinksPaginated
   */
  first?: string;
  /**
   * URI to the previous page of this set. Mandatory if this response is not the first page
   * @type {string}
   * @memberof LinksPaginated
   */
  prev?: string;
  /**
   * URI to the next page of this set. Mandatory if this response is not the last page
   * @type {string}
   * @memberof LinksPaginated
   */
  next?: string;
  /**
   * URI to the last page of this set. Mandatory if this response is not the last page
   * @type {string}
   * @memberof LinksPaginated
   */
  last?: string;
}
/**
 *
 * @export
 * @interface MetaPaginated
 */
export interface MetaPaginated {
  /**
   * The total number of pages in the full set.
   * @type {number}
   * @memberof MetaPaginated
   */
  totalPages: number;
  /**
   * The total number of records in the full set.
   * @type {number}
   * @memberof MetaPaginated
   */
  totalRecords: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum NotificationType {
  EMAIL = 'EMAIL',
  SMS = 'SMS',
}

/**
 *
 * @export
 * @enum {string}
 */
export enum PostUsageAction {
  DELETION = 'DELETION',
  DEIDENTIFICATION = 'DE_IDENTIFICATION',
}

/**
 *
 * @export
 * @interface ResponseErrorList
 */
export interface ResponseErrorList {
  /**
   *
   * @type {Array<ResponseErrorListErrors>}
   * @memberof ResponseErrorList
   */
  errors: Array<ResponseErrorListErrors>;
}
/**
 *
 * @export
 * @interface ResponseErrorListErrors
 */
export interface ResponseErrorListErrors {
  /**
   * Error code
   * @type {string}
   * @memberof ResponseErrorListErrors
   */
  code: string;
  /**
   * Title of invalid parameter or payload property
   * @type {string}
   * @memberof ResponseErrorListErrors
   */
  title: string;
  /**
   * detailed error message
   * @type {string}
   * @memberof ResponseErrorListErrors
   */
  detail: string;
  /**
   * Optional additional data for specific error types
   * @type {object}
   * @memberof ResponseErrorListErrors
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface ScopeResponse
 */
export interface ScopeResponse {
  /**
   *
   * @type {string}
   * @memberof ScopeResponse
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeResponse
   */
  purpose?: string;
  /**
   *
   * @type {string}
   * @memberof ScopeResponse
   */
  description?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ScopeResponse
   */
  claims?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof ScopeResponse
   */
  priority?: number;
}
/**
 * sharingDuration for Once_off consent can only be \"ONCE_OFF\" <br/> sharingDuration for Ongoing consent could be one of predefined sharing durations or \"CUSTOM\" <br/> \"CUSTOM\" (Ongoing consent) means a consumer is free to choose a sharingEndDate
 * @export
 * @enum {string}
 */
export enum SharingDuration {
  ONEDAY = 'ONE_DAY',
  ONEWEEK = 'ONE_WEEK',
  TWOWEEKS = 'TWO_WEEKS',
  ONEMONTH = 'ONE_MONTH',
  THREEMONTHS = 'THREE_MONTHS',
  SIXMONTHS = 'SIX_MONTHS',
  NINEMONTHS = 'NINE_MONTHS',
  ONEYEAR = 'ONE_YEAR',
  CUSTOM = 'CUSTOM',
  ONCEOFF = 'ONCE_OFF',
}

/**
 *
 * @export
 * @enum {string}
 */
export enum Status {
  REQUESTED = 'REQUESTED',
  ACTIVE = 'ACTIVE',
  EXPIRED = 'EXPIRED',
  REVOKED = 'REVOKED',
}

/**
 *
 * @export
 * @interface UseCaseResponse
 */
export interface UseCaseResponse {
  /**
   *
   * @type {string}
   * @memberof UseCaseResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UseCaseResponse
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UseCaseResponse
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof UseCaseResponse
   */
  priority?: number;
  /**
   *
   * @type {number}
   * @memberof UseCaseResponse
   */
  historicalCollectionPeriodInDays?: number;
  /**
   *
   * @type {NotificationType}
   * @memberof UseCaseResponse
   */
  notificationType?: NotificationType;
  /**
   *
   * @type {Array<ScopeResponse>}
   * @memberof UseCaseResponse
   */
  scopes?: Array<ScopeResponse>;
  /**
   *
   * @type {AccessFrequency}
   * @memberof UseCaseResponse
   */
  accessFrequency?: AccessFrequency;
  /**
   * default to [\"CUSTOM\"] for Ongoing consent; default to [\"ONCE_OFF\"] for Once_off consent if not supplied
   * @type {Array<SharingDuration>}
   * @memberof UseCaseResponse
   */
  sharingDurations?: Array<SharingDuration>;
}

/**
 * ConsentEventsApi - axios parameter creator
 * @export
 */
export const ConsentEventsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve consent events
     * @param {string} [oldest] Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
     * @param {string} [newest] Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
     * @param {number} [page] Page of results to request (standard pagination)
     * @param {number} [pageSize] Page size to request. Default is 25 (standard pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsentEvents: async (
      oldest?: string,
      newest?: string,
      page?: number,
      pageSize?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/consent-mgmt/consents/events`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (oldest !== undefined) {
        localVarQueryParameter['oldest'] = (oldest as any) instanceof Date ? (oldest as any).toISOString() : oldest;
      }

      if (newest !== undefined) {
        localVarQueryParameter['newest'] = (newest as any) instanceof Date ? (newest as any).toISOString() : newest;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page-size'] = pageSize;
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ConsentEventsApi - functional programming interface
 * @export
 */
export const ConsentEventsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve consent events
     * @param {string} [oldest] Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
     * @param {string} [newest] Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
     * @param {number} [page] Page of results to request (standard pagination)
     * @param {number} [pageSize] Page size to request. Default is 25 (standard pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConsentEvents(
      oldest?: string,
      newest?: string,
      page?: number,
      pageSize?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentEventList>> {
      const localVarAxiosArgs = await ConsentEventsApiAxiosParamCreator(configuration).getConsentEvents(
        oldest,
        newest,
        page,
        pageSize,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ConsentEventsApi - factory interface
 * @export
 */
export const ConsentEventsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Retrieve consent events
     * @param {string} [oldest] Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
     * @param {string} [newest] Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
     * @param {number} [page] Page of results to request (standard pagination)
     * @param {number} [pageSize] Page size to request. Default is 25 (standard pagination)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsentEvents(
      oldest?: string,
      newest?: string,
      page?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<ConsentEventList> {
      return ConsentEventsApiFp(configuration)
        .getConsentEvents(oldest, newest, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ConsentEventsApi - object-oriented interface
 * @export
 * @class ConsentEventsApi
 * @extends {BaseAPI}
 */
export class ConsentEventsApi extends BaseAPI {
  /**
   *
   * @summary Retrieve consent events
   * @param {string} [oldest] Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
   * @param {string} [newest] Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
   * @param {number} [page] Page of results to request (standard pagination)
   * @param {number} [pageSize] Page size to request. Default is 25 (standard pagination)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentEventsApi
   */
  public getConsentEvents(oldest?: string, newest?: string, page?: number, pageSize?: number, options?: any) {
    return ConsentEventsApiFp(this.configuration)
      .getConsentEvents(oldest, newest, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ConsentsApi - axios parameter creator
 * @export
 */
export const ConsentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retrieve consent record
     * @summary Get Consents
     * @param {string} [consumerId] consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like \&#39;|\&#39;, which need be encoded as \&#39;%7c\&#39;
     * @param {string} [consentId]
     * @param {string} [cdrArrangementId]
     * @param {'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED'} [status]
     * @param {'ONCE_OFF' | 'ONGOING'} [accessFrequency]
     * @param {'DELETION' | 'DE_IDENTIFICATION'} [postUsageAction]
     * @param {boolean} [directMarketingAllowed]
     * @param {Array<string>} [useCases] UseCase ids
     * @param {string} [dataHolderBrandId]
     * @param {string} [oldestCreated] Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestCreated] Constrain the consent with created time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestRevoked] Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestRevoked] Constrain the consent with revoked time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestSharingEndDate] Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestSharingEndDate] Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [externalId] Constrain the consent by externalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConsents: async (
      consumerId?: string,
      consentId?: string,
      cdrArrangementId?: string,
      status?: 'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED',
      accessFrequency?: 'ONCE_OFF' | 'ONGOING',
      postUsageAction?: 'DELETION' | 'DE_IDENTIFICATION',
      directMarketingAllowed?: boolean,
      useCases?: Array<string>,
      dataHolderBrandId?: string,
      oldestCreated?: string,
      newestCreated?: string,
      oldestRevoked?: string,
      newestRevoked?: string,
      oldestSharingEndDate?: string,
      newestSharingEndDate?: string,
      externalId?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/adr/consents`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      if (consumerId !== undefined) {
        localVarQueryParameter['consumerId'] = consumerId;
      }

      if (consentId !== undefined) {
        localVarQueryParameter['consentId'] = consentId;
      }

      if (cdrArrangementId !== undefined) {
        localVarQueryParameter['cdrArrangementId'] = cdrArrangementId;
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status;
      }

      if (accessFrequency !== undefined) {
        localVarQueryParameter['accessFrequency'] = accessFrequency;
      }

      if (postUsageAction !== undefined) {
        localVarQueryParameter['postUsageAction'] = postUsageAction;
      }

      if (directMarketingAllowed !== undefined) {
        localVarQueryParameter['directMarketingAllowed'] = directMarketingAllowed;
      }

      if (useCases) {
        localVarQueryParameter['useCases'] = useCases;
      }

      if (dataHolderBrandId !== undefined) {
        localVarQueryParameter['dataHolderBrandId'] = dataHolderBrandId;
      }

      if (oldestCreated !== undefined) {
        localVarQueryParameter['oldestCreated'] =
          (oldestCreated as any) instanceof Date ? (oldestCreated as any).toISOString() : oldestCreated;
      }

      if (newestCreated !== undefined) {
        localVarQueryParameter['newestCreated'] =
          (newestCreated as any) instanceof Date ? (newestCreated as any).toISOString() : newestCreated;
      }

      if (oldestRevoked !== undefined) {
        localVarQueryParameter['oldestRevoked'] =
          (oldestRevoked as any) instanceof Date ? (oldestRevoked as any).toISOString() : oldestRevoked;
      }

      if (newestRevoked !== undefined) {
        localVarQueryParameter['newestRevoked'] =
          (newestRevoked as any) instanceof Date ? (newestRevoked as any).toISOString() : newestRevoked;
      }

      if (oldestSharingEndDate !== undefined) {
        localVarQueryParameter['oldestSharingEndDate'] =
          (oldestSharingEndDate as any) instanceof Date
            ? (oldestSharingEndDate as any).toISOString()
            : oldestSharingEndDate;
      }

      if (newestSharingEndDate !== undefined) {
        localVarQueryParameter['newestSharingEndDate'] =
          (newestSharingEndDate as any) instanceof Date
            ? (newestSharingEndDate as any).toISOString()
            : newestSharingEndDate;
      }

      if (externalId !== undefined) {
        localVarQueryParameter['externalId'] = externalId;
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retreive an individual consent record
     * @summary Get Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsent: async (consentId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'consentId' is not null or undefined
      if (consentId === null || consentId === undefined) {
        throw new RequiredError(
          'consentId',
          'Required parameter consentId was null or undefined when calling getConsent.',
        );
      }
      const localVarPath = `/adr/consents/{consentId}`.replace(
        `{${'consentId'}}`,
        encodeURIComponent(String(consentId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retreive an individual consent record\'s change history
     * @summary Get Consent History
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHistory: async (consentId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'consentId' is not null or undefined
      if (consentId === null || consentId === undefined) {
        throw new RequiredError(
          'consentId',
          'Required parameter consentId was null or undefined when calling getHistory.',
        );
      }
      const localVarPath = `/adr/consents/{consentId}/history`.replace(
        `{${'consentId'}}`,
        encodeURIComponent(String(consentId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Allows Data Recipient to revoke a single consent record. This API is idempotent.
     * @summary Revoke Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeConsent: async (consentId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'consentId' is not null or undefined
      if (consentId === null || consentId === undefined) {
        throw new RequiredError(
          'consentId',
          'Required parameter consentId was null or undefined when calling revokeConsent.',
        );
      }
      const localVarPath = `/adr/consents/{consentId}`.replace(
        `{${'consentId'}}`,
        encodeURIComponent(String(consentId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * update externalId of a consent
     * @summary Update Consent
     * @param {string} consentId
     * @param {AdrUpdateConsent} [adrUpdateConsent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConsentAdr: async (
      consentId: string,
      adrUpdateConsent?: AdrUpdateConsent,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'consentId' is not null or undefined
      if (consentId === null || consentId === undefined) {
        throw new RequiredError(
          'consentId',
          'Required parameter consentId was null or undefined when calling updateConsentAdr.',
        );
      }
      const localVarPath = `/adr/consents/{consentId}`.replace(
        `{${'consentId'}}`,
        encodeURIComponent(String(consentId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function' ? configuration.accessToken() : configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof adrUpdateConsent !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(adrUpdateConsent !== undefined ? adrUpdateConsent : {})
        : adrUpdateConsent || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ConsentsApi - functional programming interface
 * @export
 */
export const ConsentsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Retrieve consent record
     * @summary Get Consents
     * @param {string} [consumerId] consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like \&#39;|\&#39;, which need be encoded as \&#39;%7c\&#39;
     * @param {string} [consentId]
     * @param {string} [cdrArrangementId]
     * @param {'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED'} [status]
     * @param {'ONCE_OFF' | 'ONGOING'} [accessFrequency]
     * @param {'DELETION' | 'DE_IDENTIFICATION'} [postUsageAction]
     * @param {boolean} [directMarketingAllowed]
     * @param {Array<string>} [useCases] UseCase ids
     * @param {string} [dataHolderBrandId]
     * @param {string} [oldestCreated] Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestCreated] Constrain the consent with created time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestRevoked] Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestRevoked] Constrain the consent with revoked time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestSharingEndDate] Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestSharingEndDate] Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [externalId] Constrain the consent by externalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findConsents(
      consumerId?: string,
      consentId?: string,
      cdrArrangementId?: string,
      status?: 'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED',
      accessFrequency?: 'ONCE_OFF' | 'ONGOING',
      postUsageAction?: 'DELETION' | 'DE_IDENTIFICATION',
      directMarketingAllowed?: boolean,
      useCases?: Array<string>,
      dataHolderBrandId?: string,
      oldestCreated?: string,
      newestCreated?: string,
      oldestRevoked?: string,
      newestRevoked?: string,
      oldestSharingEndDate?: string,
      newestSharingEndDate?: string,
      externalId?: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsentResponse>>> {
      const localVarAxiosArgs = await ConsentsApiAxiosParamCreator(configuration).findConsents(
        consumerId,
        consentId,
        cdrArrangementId,
        status,
        accessFrequency,
        postUsageAction,
        directMarketingAllowed,
        useCases,
        dataHolderBrandId,
        oldestCreated,
        newestCreated,
        oldestRevoked,
        newestRevoked,
        oldestSharingEndDate,
        newestSharingEndDate,
        externalId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retreive an individual consent record
     * @summary Get Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConsent(
      consentId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentResponse>> {
      const localVarAxiosArgs = await ConsentsApiAxiosParamCreator(configuration).getConsent(consentId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retreive an individual consent record\'s change history
     * @summary Get Consent History
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHistory(
      consentId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentHistoryResponse>> {
      const localVarAxiosArgs = await ConsentsApiAxiosParamCreator(configuration).getHistory(consentId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Allows Data Recipient to revoke a single consent record. This API is idempotent.
     * @summary Revoke Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeConsent(
      consentId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await ConsentsApiAxiosParamCreator(configuration).revokeConsent(consentId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * update externalId of a consent
     * @summary Update Consent
     * @param {string} consentId
     * @param {AdrUpdateConsent} [adrUpdateConsent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateConsentAdr(
      consentId: string,
      adrUpdateConsent?: AdrUpdateConsent,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await ConsentsApiAxiosParamCreator(configuration).updateConsentAdr(
        consentId,
        adrUpdateConsent,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ConsentsApi - factory interface
 * @export
 */
export const ConsentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * Retrieve consent record
     * @summary Get Consents
     * @param {string} [consumerId] consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like \&#39;|\&#39;, which need be encoded as \&#39;%7c\&#39;
     * @param {string} [consentId]
     * @param {string} [cdrArrangementId]
     * @param {'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED'} [status]
     * @param {'ONCE_OFF' | 'ONGOING'} [accessFrequency]
     * @param {'DELETION' | 'DE_IDENTIFICATION'} [postUsageAction]
     * @param {boolean} [directMarketingAllowed]
     * @param {Array<string>} [useCases] UseCase ids
     * @param {string} [dataHolderBrandId]
     * @param {string} [oldestCreated] Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestCreated] Constrain the consent with created time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestRevoked] Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestRevoked] Constrain the consent with revoked time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [oldestSharingEndDate] Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate minus 90 days.  Format is aligned to DateTimeString common type
     * @param {string} [newestSharingEndDate] Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
     * @param {string} [externalId] Constrain the consent by externalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConsents(
      consumerId?: string,
      consentId?: string,
      cdrArrangementId?: string,
      status?: 'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED',
      accessFrequency?: 'ONCE_OFF' | 'ONGOING',
      postUsageAction?: 'DELETION' | 'DE_IDENTIFICATION',
      directMarketingAllowed?: boolean,
      useCases?: Array<string>,
      dataHolderBrandId?: string,
      oldestCreated?: string,
      newestCreated?: string,
      oldestRevoked?: string,
      newestRevoked?: string,
      oldestSharingEndDate?: string,
      newestSharingEndDate?: string,
      externalId?: string,
      options?: any,
    ): AxiosPromise<Array<ConsentResponse>> {
      return ConsentsApiFp(configuration)
        .findConsents(
          consumerId,
          consentId,
          cdrArrangementId,
          status,
          accessFrequency,
          postUsageAction,
          directMarketingAllowed,
          useCases,
          dataHolderBrandId,
          oldestCreated,
          newestCreated,
          oldestRevoked,
          newestRevoked,
          oldestSharingEndDate,
          newestSharingEndDate,
          externalId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retreive an individual consent record
     * @summary Get Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsent(consentId: string, options?: any): AxiosPromise<ConsentResponse> {
      return ConsentsApiFp(configuration)
        .getConsent(consentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retreive an individual consent record\'s change history
     * @summary Get Consent History
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHistory(consentId: string, options?: any): AxiosPromise<ConsentHistoryResponse> {
      return ConsentsApiFp(configuration)
        .getHistory(consentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Allows Data Recipient to revoke a single consent record. This API is idempotent.
     * @summary Revoke Consent
     * @param {string} consentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeConsent(consentId: string, options?: any): AxiosPromise<void> {
      return ConsentsApiFp(configuration)
        .revokeConsent(consentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * update externalId of a consent
     * @summary Update Consent
     * @param {string} consentId
     * @param {AdrUpdateConsent} [adrUpdateConsent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConsentAdr(consentId: string, adrUpdateConsent?: AdrUpdateConsent, options?: any): AxiosPromise<void> {
      return ConsentsApiFp(configuration)
        .updateConsentAdr(consentId, adrUpdateConsent, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ConsentsApi - object-oriented interface
 * @export
 * @class ConsentsApi
 * @extends {BaseAPI}
 */
export class ConsentsApi extends BaseAPI {
  /**
   * Retrieve consent record
   * @summary Get Consents
   * @param {string} [consumerId] consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like \&#39;|\&#39;, which need be encoded as \&#39;%7c\&#39;
   * @param {string} [consentId]
   * @param {string} [cdrArrangementId]
   * @param {'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED'} [status]
   * @param {'ONCE_OFF' | 'ONGOING'} [accessFrequency]
   * @param {'DELETION' | 'DE_IDENTIFICATION'} [postUsageAction]
   * @param {boolean} [directMarketingAllowed]
   * @param {Array<string>} [useCases] UseCase ids
   * @param {string} [dataHolderBrandId]
   * @param {string} [oldestCreated] Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated minus 90 days.  Format is aligned to DateTimeString common type
   * @param {string} [newestCreated] Constrain the consent with created time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
   * @param {string} [oldestRevoked] Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked minus 90 days.  Format is aligned to DateTimeString common type
   * @param {string} [newestRevoked] Constrain the consent with revoked time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
   * @param {string} [oldestSharingEndDate] Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate minus 90 days.  Format is aligned to DateTimeString common type
   * @param {string} [newestSharingEndDate] Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today. Format is aligned to DateTimeString common type
   * @param {string} [externalId] Constrain the consent by externalId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentsApi
   */
  public findConsents(
    consumerId?: string,
    consentId?: string,
    cdrArrangementId?: string,
    status?: 'REQUESTED' | 'ACTIVE' | 'REVOKED' | 'EXPIRED',
    accessFrequency?: 'ONCE_OFF' | 'ONGOING',
    postUsageAction?: 'DELETION' | 'DE_IDENTIFICATION',
    directMarketingAllowed?: boolean,
    useCases?: Array<string>,
    dataHolderBrandId?: string,
    oldestCreated?: string,
    newestCreated?: string,
    oldestRevoked?: string,
    newestRevoked?: string,
    oldestSharingEndDate?: string,
    newestSharingEndDate?: string,
    externalId?: string,
    options?: any,
  ) {
    return ConsentsApiFp(this.configuration)
      .findConsents(
        consumerId,
        consentId,
        cdrArrangementId,
        status,
        accessFrequency,
        postUsageAction,
        directMarketingAllowed,
        useCases,
        dataHolderBrandId,
        oldestCreated,
        newestCreated,
        oldestRevoked,
        newestRevoked,
        oldestSharingEndDate,
        newestSharingEndDate,
        externalId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retreive an individual consent record
   * @summary Get Consent
   * @param {string} consentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentsApi
   */
  public getConsent(consentId: string, options?: any) {
    return ConsentsApiFp(this.configuration)
      .getConsent(consentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retreive an individual consent record\'s change history
   * @summary Get Consent History
   * @param {string} consentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentsApi
   */
  public getHistory(consentId: string, options?: any) {
    return ConsentsApiFp(this.configuration)
      .getHistory(consentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Allows Data Recipient to revoke a single consent record. This API is idempotent.
   * @summary Revoke Consent
   * @param {string} consentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentsApi
   */
  public revokeConsent(consentId: string, options?: any) {
    return ConsentsApiFp(this.configuration)
      .revokeConsent(consentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * update externalId of a consent
   * @summary Update Consent
   * @param {string} consentId
   * @param {AdrUpdateConsent} [adrUpdateConsent]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsentsApi
   */
  public updateConsentAdr(consentId: string, adrUpdateConsent?: AdrUpdateConsent, options?: any) {
    return ConsentsApiFp(this.configuration)
      .updateConsentAdr(consentId, adrUpdateConsent, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
